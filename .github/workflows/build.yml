name: Release Build
on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  build-tag-release:
    name: Build, Tag, and Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Extract version and set tag
        id: version
        run: |
          VERSION=$(grep -m 1 '<version>' pom.xml | sed -E 's/.*<version>([^<]+)<\/version>.*/\1/')
          SHORT_SHA=$(git rev-parse --short HEAD)
          TAG="${VERSION}-${SHORT_SHA}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "VERSION IS $VERSION, SHORT_SHA IS $SHORT_SHA, TAG IS $TAG"
      
      - name: Build shaded JAR
        run: mvn -B clean package -DskipTests
      
      - name: Create and push git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ env.TAG }}
          git push origin ${{ env.TAG }}
      
      - name: Prepare release artifact
        run: |
          mkdir -p release
          if ls target/CoreProtect-*.jar 1> /dev/null 2>&1; then
            cp target/CoreProtect-*.jar release/CoreProtect-${{ env.TAG }}.jar
          else
            echo "Error: No shaded JAR file found in target directory!"
            exit 1
          fi
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: coreprotect-jar
          path: release/CoreProtect-${{ env.TAG }}.jar
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/CoreProtect-${{ env.TAG }}.jar
          tag_name: ${{ env.TAG }}
          name: CoreProtect-${{ env.TAG }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
