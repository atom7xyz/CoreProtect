name: Release Build

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  tag-and-build:
    name: Tag, Build, and Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Get version from pom.xml
        id: get_version
        run: |
          VERSION=$(grep -m 1 '<version>' pom.xml | sed -E 's/.*<version>([^<]+)<\/version>.*/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Get short commit SHA
        id: get_sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Create tag and push
        run: |
          TAG="${VERSION}-${SHORT_SHA}"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $TAG
          git push origin $TAG

  build-and-release:
    name: Build JAR and Create Release
    runs-on: ubuntu-latest
    needs: tag-and-build

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Parse version and SHA from tag
        id: parse_tag
        run: |
          FULL_TAG=${GITHUB_REF#refs/tags/}
          VERSION=${FULL_TAG%-*}
          SHA=${FULL_TAG##*-}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "SHA=$SHA" >> $GITHUB_ENV

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build shaded JAR
        run: mvn -B clean package -DskipTests

      # Debug step to verify the files
      - name: List files in target directory
        run: ls -l target/

      - name: Rename shaded JAR
        run: |
          mkdir -p release
          # Make sure the JAR file exists and has the correct name
          if ls target/CoreProtect-*.jar 1> /dev/null 2>&1; then
            mv target/CoreProtect-*.jar release/CoreProtect-${VERSION}-${SHA}.jar
          else
            echo "Error: No shaded JAR file found in target directory!"
            exit 1
          fi

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: coreprotect-jar
          path: release/CoreProtect-*-*.jar

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/CoreProtect-*-*.jar
          name: CoreProtect-${{ env.VERSION }}-${{ env.SHA }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
